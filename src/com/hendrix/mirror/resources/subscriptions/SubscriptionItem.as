package com.hendrix.mirror.resources.subscriptions
{
	import com.hendrix.mirror.resources.DateTime;

	public class SubscriptionItem
	{
		static public const COLLECTION_timeline:		String = "timeline";
		static public const COLLECTION_locations:		String = "locations";
		static public const COLLECTION_settings:		String = "settings";
		
		static public const OPERATION_DELETE:				String = "DELETE";
		static public const OPERATION_INSERT:				String = "INSERT";
		static public const OPERATION_UPDATE:				String = "UPDATE";

		/**
		 * The type of resource. This is always mirror#subscription. 
		 */
		public var kind:				String 		= "mirror#subscription";
		
		/**
		 * The ID of the subscription.	
		 */
		public var id:				String 		= null;
		
		/**
		 * The time at which this subscription was last modified, formatted according to RFC 3339.
		 */
		public var updated:				String 		= null;
		
		/**
		 * The collection to subscribe to. Allowed values are:<li>timeline - Changes in the timeline including insertion, deletion, and updates.<li>locations - Location updates.<li>settings - Settings updates. 
		 */
		public var collection:				String 		= null;
		
		/**
		 * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:<li>UPDATE - The item has been updated.<li>INSERT - A new item has been inserted.<li>DELETE - The item has been deleted.
		 */
		public var operation:				Vector.<String> 		= null;

		/**
		 * The URL where notifications should be delivered (must start with https://). 
		 */
		public var callbackUrl:				String 		= null;
		
		/**
		 * A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google. 
		 */
		public var verifyToken:				String 		= null;
		
		/**
		 * An opaque token sent to the subscriber in notifications so that it can determine the ID of the user. 
		 */
		public var userToken:				String 		= null;
		
		/**
		 * Container object for notifications. This is not populated in the Subscription resource. 
		 */
		public var notification:				Notification 		= null;
		
		public function SubscriptionItem()
		{
			operation = new Vector.<String>();
			notification = new Notification();
			
		}
	}
}